"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[8766],{55241:(n,a,e)=>{e.r(a),e.d(a,{default:()=>b});var s=e(64304);const t=(0,s._)("p",null,"反向代理，作为一种高效的后端工具，其主要功能是拦截所有传入的网络请求，并将它们统一转发到相应的服务器。通过反向代理，你可以轻松地通过不同的域名访问特定的 Docker 服务，而不需要记住复杂的端口号。",-1),o=(0,s._)("p",null,"更重要的是，反向代理能够为你的链接提供 HTTPS 加密。未加密的 HTTP 链接如同裸奔在网络世界，容易被窥探和劫持。通过反向代理，所有传入的流量都被加密，极大地提升了数据传输的安全性，有效防止了流量被识别和篡改的风险。",-1),c=(0,s._)("p",null,"常见的反向代理工具包括 Nginx Proxy Manager、nginxWebUI、Caddy 和 Lucky。",-1),p=(0,s._)("h2",{id:"nginx-proxy-manager",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#nginx-proxy-manager"},[(0,s._)("span",null,"Nginx Proxy Manager")])],-1),i={href:"https://github.com/jlesage/docker-nginx-proxy-manager",target:"_blank",rel:"noopener noreferrer"},l={href:"https://www.nginxwebui.cn/product.html",target:"_blank",rel:"noopener noreferrer"},r=(0,s.uE)('<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">app</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;jlesage/nginx-proxy-manager:latest&quot;</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>proxy<span class="token punctuation">-</span>manager\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;9001:8080&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;9002:8181&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;9003:4443&quot;</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /volume1/docker/nginx<span class="token punctuation">-</span>proxy<span class="token punctuation">-</span>manager/config<span class="token punctuation">:</span>/config\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要访问后台管理界面，请前往 <code>localhost:9002</code>。默认登录账户为 <code>admin@example.com</code>，密码为 <code>changeme</code>。系统将提示你在首次登录时更改这些凭证。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>启用反向代理后，只需在路由器上开放 <code>9003</code> 端口（自己定），便可实现流量转发，无需在公网上开放其他端口。你可以通过 CNAME 将定制域名 <code>xxx.newzone.top</code> 解析到家庭 DDNS 域名 <code>yyy.newzone.top</code>。这样设置后，通过访问 <code>xxx.newzone.top:9003</code>，你便能够直接访问指定服务，并享受到自动部署的 SSL 加密带来的安全保障。若需切换至其他服务，只需更改域名的 <code>xxx</code> 部分即可。</p><h2 id="caddy" tabindex="-1"><a class="header-anchor" href="#caddy"><span>Caddy</span></a></h2>',4),d={href:"https://caddyserver.com/",target:"_blank",rel:"noopener noreferrer"},u=(0,s.uE)('<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>\n\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">caddy</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> caddy<span class="token punctuation">:</span>latest\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> caddy\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;9080:80&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;9443:443&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;9443:443/udp&quot;</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /volume1/docker/caddy/Caddyfile<span class="token punctuation">:</span>/etc/caddy/Caddyfile\n      <span class="token punctuation">-</span> /volume1/docker/caddy/site<span class="token punctuation">:</span>/srv\n      <span class="token punctuation">-</span> /volume1/docker/caddy/caddy_data<span class="token punctuation">:</span>/data\n      <span class="token punctuation">-</span> /volume1/docker/caddy/caddy_config<span class="token punctuation">:</span>/config\n\n<span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n  <span class="token key atrule">caddy_data</span><span class="token punctuation">:</span>\n  <span class="token key atrule">caddy_config</span><span class="token punctuation">:</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">',2),k={class:"footnotes"},m={class:"footnotes-list"},g={id:"footnote1",class:"footnote-item"},y={href:"https://post.smzdm.com/p/az6989nn/",target:"_blank",rel:"noopener noreferrer"},v=(0,s._)("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),x={},b=(0,e(86683).Z)(x,[["render",function(n,a){const e=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[t,o,c,p,(0,s._)("p",null,[(0,s._)("a",i,[(0,s.Uk)("Nginx Proxy Manager"),(0,s.Wm)(e)]),(0,s.Uk)(" 是一款集成了图形用户界面的反向代理工具。它的 SSL 证书有效期长达三个月，并可自动续期。由于国内家用宽带不支持 80 和 443 端口，因此这里未采用 Nginx Proxy Manager 官方容器，也不建议使用 Caddy。如果你对 Nginx Proxy Manager 不熟悉，也可以尝试国内开发的"),(0,s._)("a",l,[(0,s.Uk)("nginxWebUI"),(0,s.Wm)(e)]),(0,s.Uk)("，它同样提供了图形化配置、SSL 证书申请和自动续签等功能。")]),r,(0,s._)("p",null,[(0,s._)("a",d,[(0,s.Uk)("Caddy"),(0,s.Wm)(e)]),(0,s.Uk)(" 的配置更加简便，但需注意，Caddy v2 默认采用 http-01 方式申请 HTTPS 证书，这要求你的域名能够通过公网的 80/443 端口进行所有权验证。在国内环境下，你可能需要手动配置证书。你可以通过 Certbot 免费申请证书，或选择在阿里云、腾讯云等平台申请一年有效期的免费证书。")]),u,(0,s._)("section",k,[(0,s._)("ol",m,[(0,s._)("li",g,[(0,s._)("p",null,[(0,s._)("a",y,[(0,s.Uk)("NAS 原来这么有用 篇 143：一个端口访问 NAS 所有服务，使用二级域名定义你的每一项服务"),(0,s.Wm)(e)]),(0,s.Uk)(),v])])])])])}]])},86683:(n,a)=>{a.Z=(n,a)=>{const e=n.__vccOpts||n;for(const[n,s]of a)e[n]=s;return e}},48832:(n,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s=JSON.parse('{"key":"v-06c25741","path":"/services/dockers-on-nas/reverse-proxy.html","title":"反向代理：Nginx Proxy Manager","lang":"zh-CN","frontmatter":{"article":false,"title":"反向代理：Nginx Proxy Manager","order":101,"description":"反向代理，作为一种高效的后端工具，其主要功能是拦截所有传入的网络请求，并将它们统一转发到相应的服务器。通过反向代理，你可以轻松地通过不同的域名访问特定的 Docker 服务，而不需要记住复杂的端口号。 更重要的是，反向代理能够为你的链接提供 HTTPS 加密。未加密的 HTTP 链接如同裸奔在网络世界，容易被窥探和劫持。通过反向代理，所有传入的流量都被加密，极大地提升了数据传输的安全性，有效防止了流量被识别和篡改的风险。 常见的反向代理工具包括 Nginx Proxy Manager、nginxWebUI、Caddy 和 Lucky。 Nginx Proxy Manager","head":[["meta",{"property":"og:url","content":"https://newzone.top/services/dockers-on-nas/reverse-proxy.html"}],["meta",{"property":"og:site_name","content":"LearnData-开源笔记"}],["meta",{"property":"og:title","content":"反向代理：Nginx Proxy Manager"}],["meta",{"property":"og:description","content":"反向代理，作为一种高效的后端工具，其主要功能是拦截所有传入的网络请求，并将它们统一转发到相应的服务器。通过反向代理，你可以轻松地通过不同的域名访问特定的 Docker 服务，而不需要记住复杂的端口号。 更重要的是，反向代理能够为你的链接提供 HTTPS 加密。未加密的 HTTP 链接如同裸奔在网络世界，容易被窥探和劫持。通过反向代理，所有传入的流量都被加密，极大地提升了数据传输的安全性，有效防止了流量被识别和篡改的风险。 常见的反向代理工具包括 Nginx Proxy Manager、nginxWebUI、Caddy 和 Lucky。 Nginx Proxy Manager"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-29T12:26:51.000Z"}],["meta",{"property":"article:author","content":"清顺"}],["meta",{"property":"article:modified_time","content":"2024-01-29T12:26:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"反向代理：Nginx Proxy Manager\\",\\"description\\":\\"反向代理，作为一种高效的后端工具，其主要功能是拦截所有传入的网络请求，并将它们统一转发到相应的服务器。通过反向代理，你可以轻松地通过不同的域名访问特定的 Docker 服务，而不需要记住复杂的端口号。 更重要的是，反向代理能够为你的链接提供 HTTPS 加密。未加密的 HTTP 链接如同裸奔在网络世界，容易被窥探和劫持。通过反向代理，所有传入的流量都被加密，极大地提升了数据传输的安全性，有效防止了流量被识别和篡改的风险。 常见的反向代理工具包括 Nginx Proxy Manager、nginxWebUI、Caddy 和 Lucky。 Nginx Proxy Manager\\"}"]]},"headers":[{"level":2,"title":"Nginx Proxy Manager","slug":"nginx-proxy-manager","link":"#nginx-proxy-manager","children":[]},{"level":2,"title":"Caddy","slug":"caddy","link":"#caddy","children":[]}],"git":{"createdTime":1697975314000,"updatedTime":1706531211000,"contributors":[{"name":"rockbenben","email":"qingwhat@gmail.com","commits":5}]},"readingTime":{"minutes":2.39,"words":717},"filePathRelative":"services/dockers-on-nas/reverse-proxy.md","localizedDate":"2023年10月22日","excerpt":"<p>反向代理，作为一种高效的后端工具，其主要功能是拦截所有传入的网络请求，并将它们统一转发到相应的服务器。通过反向代理，你可以轻松地通过不同的域名访问特定的 Docker 服务，而不需要记住复杂的端口号。</p>\\n<p>更重要的是，反向代理能够为你的链接提供 HTTPS 加密。未加密的 HTTP 链接如同裸奔在网络世界，容易被窥探和劫持。通过反向代理，所有传入的流量都被加密，极大地提升了数据传输的安全性，有效防止了流量被识别和篡改的风险。</p>\\n<p>常见的反向代理工具包括 Nginx Proxy Manager、nginxWebUI、Caddy 和 Lucky。</p>\\n<h2>Nginx Proxy Manager</h2>","autoDesc":true}')}}]);